 std::istringstream 
    - Te permite tratar una cadena como si fuera un stream de entrada

üîπ std::cin ‚Üí lee datos del teclado
üîπ std::ifstream ‚Üí lee datos de un archivo
üîπ std::istringstream ‚Üí lee datos desde una cadena de texto

std::istringstream iss("123");
int value;
iss >> value;

El operador >> lee caracteres de la cadena uno a uno internamente, hasta formar un n√∫mero v√°lido para asignarlo a value.


contenedores de la stl
STL - Standard Template Library

Un conenedor de c++ es una estructoura que almacena 
colecciones de objetos (arrays, listas, pilas, etc)

##########################################################

std::vector
Es una array dinamico que crece autoamticamente.
#include <vector>
Lo usamos cuando - si necesitas un acceso rapido por indice
y no haces muchas inserciones, borrados en el medio

push_back(valor)    - a√±ade un valor al final
pop_back()          - elimina el ultimo
at(i) o vec[i]      - acceso por indice; at lanza excepcion si es invalido
size()              - cantidad de elementos
empty()             - si esta vacio
clear()             - borra todos los elementos
begin() - end()     - iteradores
insert(pos, val)    - interta el valor en la posicion que quieras
erase(pos)          - elimina en la posicion

#include <iostream>
#include <vector>

int main(void) 
{
    std::vector<int> vec;

    vec.push_back(10); // A√±ade un 10
    vec.push_back(20); // A√±ade un 20

    std::cout << "Tama√±o: " << vec.size() << std::endl;
    std::cout << "Primer elemento: " << vec[0] << std::endl;

    vec[1] = 25; // Modifica el segundo valor
    vec.pop_back(); // Elimina el √∫ltimo elemento

    for (size_t i = 0; i < vec.size(); i++)
        std::cout << vec[i] << std::endl;

    return 0;
}

#################################################################

std::list
Lista doblemente enlazada
#include <list>

lo usamos cuando - tienes que hacer muchas inserciones/borrados
en medio de la listas

push_back(val)      - A√±ade un valor al final de la lista
push_front(val)     - A√±ade un valor al principio de la lista
pop_back()          - Elimina el ultimo elemento de la lista
pop_front()         - Elimina el primer elemento de la lista
insert(it, val)     - Inserta antes del iterador it
erase(it)           - Elimina en posicion
begin() - end()     - Iteradores
size()              - Tama√±o de la lista
empty()             - Ver si esta vacia la lista
clear()             - Borra la lista
sort()              - ordena (como ordena?)

#include <iostream>
#include <list>

int main() 
{
    std::list<int> myList;

    myList.push_back(3);
    myList.push_front(1);
    myList.insert(++myList.begin(), 2); // Inserta 2 en la segunda posici√≥n

    for (std::list<int>::iterator it = myList.begin(); it != myList.end(); ++it)
        std::cout << *it << " "; // 1 2 3

    return 0;
}

##########################################################################################

std::deque

Array doble extremo eficiente en ambos lados 
#include <deque>

cuando usarla - cuando necesitas insertar o borrar rapido al inicio
y al final (como una cola o bufer circular)


push_back(val)      - A√±ade un valor al final de la lista
push_front(val)     - A√±ade un valor al principio de la lista
pop_back()          - Elimina el ultimo elemento de la lista
pop_front()         - Elimina el primer elemento de la lista
deque[i]            - Acceso por indice


std::map

es una estructura de datos que guarda pares de elementos
#include <map>
- Una clave (Key): lo que usas para buscar
- un valor (value): Lo que quieres guardar o asociar a esa clave

Sirve para
- Guardar cosas con un identificador unico
- Buscar rapidamente por ese identificador
- Actualizar datos sin recorrer todo
- Mantener el contenido ordenado por clave

insert()                - Inserta un par de clave-valor
find(clave)             - Devuelve un iterador a la clave
erase(clave)            - Borra un elemento
[](acceso por clave)    - Inserta si no existe accede si si
Size()                  - Cuantos elementos tiene
empyty()                - Te dice si esta vacio o no
clear()                 - Borra todo el contenido

iterar por un map
for (std::map<std::string, int>::iterator it = edades.begin(); it != edades.end(); ++it)
{
    std::cout << it->first << " tiene " << it->second << " a√±os" << std::endl;
}

- Las claves no se repiten.
- Est√°n siempre ordenadas autom√°ticamente (por <).
- Se puede acceder a cualquier clave r√°pidamente.

std::stack

#include <stack>

Pila - estructura LIFO Last In, First out
El ultimo elemento que se a√±ade es el primero en salir

cuando usarla - Necesitas una estructura de datos tipo pila, donde solo accedes al elemento en la cima
- se usa en algoritmos backtraking, parsers , evalucaion de expresiones postfijas, funciones recursivas simuladas

push(val)   - a√±ade un valor a la pila
pop()       - Elimina el elemento en la cima (no lo retorna)
top()       - Accede al valor en la cima, sin quitarlo
size()      - Tama√±o de la pila
empty()     - Comprueba si la pila esta vacia

#include <iostream>
#include <stack>

int main() 
{
    std::stack<int> myStack;

    myStack.push(10);
    myStack.push(20);
    myStack.push(30);  // La pila ahora es: [10, 20, 30] (30 en la cima)

    std::cout << "Top: " << myStack.top() << std::endl; // Imprime 30

    myStack.pop(); // Elimina el 30

    std::cout << "Now top: " << myStack.top() << std::endl; // Imprime 20

    return 0;
}

